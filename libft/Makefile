# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    Makefile                                           :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: hni-xuan <hni-xuan@student.42.fr>          +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2024/06/11 15:51:42 by hni-xuan          #+#    #+#              #
#    Updated: 2024/11/28 14:12:13 by hni-xuan         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# Makefile - a set of commands with variable names and targets to  
#            create object file and to remove them 

# target used = NAME all clean fclean re bonus 
# '=' used for variable assignment 
# ':' for defining rules and targets 
# left side of : will depend on the right side of :

# compile 
CC = gcc

# compiler flags to improve the code quality 
CFLAGS = -Wall -Wextra -Werror

# source file
SRCS = ft_atoi.c ft_bzero.c ft_calloc.c ft_isalnum.c ft_isalpha.c \
		ft_isascii.c ft_isdigit.c ft_isprint.c ft_itoa.c ft_memchr.c \
		ft_memcmp.c ft_memcpy.c ft_memmove.c ft_memset.c ft_putchar_fd.c \
		ft_putendl_fd.c ft_putnbr_fd.c ft_putstr_fd.c ft_split.c ft_strchr.c \
		ft_strdup.c ft_striteri.c ft_strjoin.c ft_strlcat.c ft_strlcpy.c \
		ft_strlen.c ft_strmapi.c ft_strncmp.c ft_strnstr.c ft_strrchr.c \
		ft_strtrim.c ft_substr.c ft_tolower.c ft_toupper.c \
		ft_printf/ft_printf.c ft_printf/ft_printf_utils.c
		

BONUS_SRCS = ft_lstadd_back.c ft_lstadd_front.c ft_lstclear.c ft_lstdelone.c \
				ft_lstiter.c ft_lstlast.c ft_lstmap.c ft_lstnew.c ft_lstsize.c 

# transforms the list of source files into a list of object files 
# for each item in SRCS
# the name follow the same 
OBJS = $(SRCS:.c=.o)
BONUS_OBJS = $(BONUS_SRCS:.c=.o)

# name of the final output file
# .a prefix of the static library
# static library are a collection of object file (.o) that
# are linked into an executable at compile time 
# NAME : make the Makefile more readable and maintainable 
# avoid hardcoding the filename in mutiple places in Makefile 
NAME = libft.a

# When run 'make' with no argument ~ only type 'make' as command
# 'make' uses the default target, which is 'all'
# 'all' depends on $(NAME)
# Why used target name 'all'
# common convention (standard word used in C program) to builds everything 
# in the project
all : $(NAME)

# $(NAME) target 'libft.a' depends on $(OBJS) and $(BONUS_OBJ)
# ar - archive command used to create and maintain library archives 
# -r : replace or add the named files to the archive
# -c : create the archive if it does not already exist
# -s : create an index for the archive, which speeds up linking
# $(NAME) specifies the name of archive file to create and update 
# $(OBJS) $(BONUS_OBJS) these are the obj files to be included in the archive
$(NAME) : $(OBJS) $(BONUS_OBJS)
	ar -rcs $(NAME) $(OBJS) $(BONUS_OBJS)

# define a ruke to compile .o files from .c files 
# '%' write rules that can match multiple files of a similar type
# -c : compile the source file into an obj file, but no to link
# -c generate an obj file from the source file 
# -o : control the name of the output file generated by the compiler
# %.o : %.c uses -c to compile each .c file to an .o file
# -o to name the output of object file
# $< right side of :
# $@ left side of :
%.o: %.c
	$(CC) $(CFLAGS) -c $< -o $@

# remove all generated and created during the build process
clean : 
	rm -f $(OBJS) $(BONUS_OBJS)

# remove all generated and created and the final built executable 
# or library, leaving the directory in a state as if no build had occurred
fclean : 
	rm -f $(NAME) $(OBJS) $(BONUS_OBJS)

# execute a sequence of commands 
# this means fully clean everything(fclean) and run again(all)
re : fclean all

# represents a specific build that is additional to 'all'
# 'bonus' follow the intended below specifically 
bonus : $(BONUS_OBJS)
	ar -rcs $(NAME) $(BONUS_OBJS)

# indicate to 'make' that these targets are not actual files 
# but rather symbolic names for tasks to be executed 
# Without '.phony', if a file with the same name as a target exists 
# in the directory, 'make' might mistakenly think the target is up 
# to date when it's not, leading to incorrect behavior
# important for error handling
.PHONY : all bonus clean fclean re
# this declare 'all' 'bonus' 'clean' 'fclean' 're' as phony target
# ensuring 'make' doesn't confuse them with files 

# type 'make' to run Makefile 
# all the C file in SRCS will be compile into obj file
# archive in libft.a 
# libft.a will be generated